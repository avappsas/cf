# Build stage for Node.js assets
FROM node:20-alpine AS build
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install Node dependencies
RUN npm ci

# Copy source code (excluding .NET files)
COPY . .
RUN rm -rf WordToPdfConsole/ || true
RUN rm -f *.csproj *.sln global.json || true

# Build assets with Vite
RUN npm run build

# Production stage for PHP
FROM php:8.3-cli-bullseye

# Set labels to indicate this is a PHP project
LABEL project.type="php-laravel"

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gnupg2 curl ca-certificates unixodbc-dev libzip-dev zip git \
    && rm -rf /var/lib/apt/lists/*

# Install Microsoft SQL Server drivers
RUN curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /usr/share/keyrings/microsoft.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/debian/11/prod bullseye main" \
       > /etc/apt/sources.list.d/mssql-release.list \
    && apt-get update \
    && ACCEPT_EULA=Y apt-get install -y msodbcsql18 \
    && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN docker-php-ext-install pcntl bcmath zip pdo \
    && pecl install sqlsrv pdo_sqlsrv \
    && docker-php-ext-enable sqlsrv pdo_sqlsrv

# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /app

# Copy PHP dependency files first (for Docker layer caching)
COPY composer*.json ./

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader

# Copy application code (excluding .NET files)
COPY . .
RUN rm -rf WordToPdfConsole/ || true
RUN rm -f *.csproj *.sln global.json || true

# Copy built assets from Node stage
COPY --from=build /app/public/build ./public/build

# Set proper permissions
RUN mkdir -p storage/logs storage/framework/{cache,sessions,views} \
    && chmod -R 775 storage bootstrap/cache

# Railway provides PORT environment variable
CMD php artisan serve --host=0.0.0.0 --port=$PORT