# =======================
# Etapa 1: Builder
# =======================
FROM ubuntu:22.04 AS builder
ENV DEBIAN_FRONTEND=noninteractive

# Paquetes base
RUN apt-get update && apt-get install -y \
  curl ca-certificates git unzip gnupg2 software-properties-common

# Node 18 (para Laravel Mix)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
 && apt-get install -y nodejs

# PHP 8.3 CLI + extensiones necesarias para composer/artisan
RUN add-apt-repository ppa:ondrej/php -y \
 && apt-get update && apt-get install -y \
    php8.3 php8.3-zip php8.3-mbstring php8.3-xml php8.3-curl

# Composer
RUN curl -sS https://getcomposer.org/installer -o composer-setup.php \
 && php composer-setup.php --install-dir=/usr/local/bin --filename=composer \
 && rm composer-setup.php

WORKDIR /app

# Instalar dependencias PHP (ignorando requisitos de plataforma para evitar ext-sqlsrv en build)
COPY composer.json composer.lock ./
ENV COMPOSER_ALLOW_SUPERUSER=1 COMPOSER_MEMORY_LIMIT=-1
RUN composer install --no-dev --no-interaction --prefer-dist --no-ansi --no-progress --optimize-autoloader --ignore-platform-reqs

# Instalar dependencias JS y compilar assets (Laravel Mix)
COPY package.json package-lock.json* ./
RUN [ -f package-lock.json ] && npm ci || npm i

# Copiar el proyecto y compilar
COPY . .
RUN npm run production || npm run prod || true

# Optimizar caches de Laravel
RUN php artisan config:clear && php artisan config:cache && php artisan route:cache && php artisan view:cache


# =======================
# Etapa 2: Runtime
# =======================
FROM ubuntu:22.04
ENV DEBIAN_FRONTEND=noninteractive

# Paquetes base + Nginx + Supervisor
RUN apt-get update && apt-get install -y \
  ca-certificates apt-transport-https gnupg2 software-properties-common \
  nginx supervisor curl git unzip

# PHP 8.3 FPM + extensiones comunes
RUN add-apt-repository ppa:ondrej/php -y \
 && apt-get update && apt-get install -y \
    php8.3-fpm php8.3-cli \
    php8.3-mbstring php8.3-xml php8.3-curl php8.3-zip php8.3-intl php8.3-bcmath php8.3-gd

# Drivers SQL Server (msodbcsql18 + herramientas + toolchain para PECL)
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add - \
 && curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list > /etc/apt/sources.list.d/mssql-release.list \
 && apt-get update \
 && ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18 \
 && apt-get install -y unixodbc-dev gcc g++ make autoconf pkg-config php-pear php8.3-dev \
 && apt-get clean && rm -rf /var/lib/apt/lists/*

# Instalar extensiones PECL separadas (evita OOM)
RUN pecl install -f sqlsrv \
 && echo "extension=sqlsrv.so" > /etc/php/8.3/fpm/conf.d/20-sqlsrv.ini \
 && rm -rf /tmp/pear && apt-get clean && rm -rf /var/lib/apt/lists/*
RUN pecl install -f pdo_sqlsrv \
 && echo "extension=pdo_sqlsrv.so" > /etc/php/8.3/fpm/conf.d/30-pdo_sqlsrv.ini \
 && rm -rf /tmp/pear && apt-get clean && rm -rf /var/lib/apt/lists/*

# PHP-FPM escuchando por TCP (no socket)
RUN sed -ri 's|^;?listen\s*=.*$|listen = 127.0.0.1:9000|' /etc/php/8.3/fpm/pool.d/www.conf \
 && sed -ri 's|^;?pm.max_children\s*=.*$|pm.max_children = 10|' /etc/php/8.3/fpm/pool.d/www.conf \
 && sed -ri 's|^;?clear_env\s*=.*$|clear_env = no|' /etc/php/8.3/fpm/pool.d/www.conf

# Copiar app compilada
WORKDIR /var/www/html
COPY --from=builder /app /var/www/html

# Permisos Laravel
RUN chown -R www-data:www-data storage bootstrap/cache \
 && chmod -R 775 storage bootstrap/cache

# ---------- Nginx conf (plantilla con ${PORT}) ----------
RUN mkdir -p /etc/nginx/conf.d
RUN bash -lc 'cat > /etc/nginx/conf.d/default.conf.template << "EOF"\n\
server {\n\
    listen ${PORT};\n\
    server_name _;\n\
    root /var/www/html/public;\n\
    index index.php index.html;\n\
\n\
    add_header X-Frame-Options \"SAMEORIGIN\" always;\n\
    add_header X-Content-Type-Options \"nosniff\" always;\n\
\n\
    location / {\n\
        try_files $uri $uri/ /index.php?$query_string;\n\
    }\n\
\n\
    location ~* \\.(?:css|js|jpg|jpeg|png|gif|ico|svg|woff2?)$ {\n\
        expires 7d;\n\
        access_log off;\n\
        try_files $uri $uri/ @laravel;\n\
    }\n\
\n\
    location @laravel {\n\
        rewrite ^(.+)$ /index.php last;\n\
    }\n\
\n\
    location ~ \\.php$ {\n\
        include snippets/fastcgi-php.conf;\n\
        fastcgi_pass 127.0.0.1:9000;\n\
        fastcgi_read_timeout 300;\n\
    }\n\
\n\
    client_max_body_size 50M;\n\
    access_log /var/log/nginx/access.log;\n\
    error_log  /var/log/nginx/error.log;\n\
}\n\
EOF'

# ---------- Supervisor (php-fpm + nginx) ----------
RUN bash -lc 'cat > /etc/supervisor/conf.d/supervisord.conf << "EOF"\n\
[supervisord]\n\
nodaemon=true\n\
user=root\n\
logfile=/var/log/supervisor/supervisord.log\n\
\n\
[program:php-fpm]\n\
command=/usr/sbin/php-fpm8.3 -F\n\
priority=10\n\
autostart=true\n\
autorestart=true\n\
stdout_logfile=/dev/stdout\n\
stderr_logfile=/dev/stderr\n\
\n\
[program:nginx]\n\
command=/usr/sbin/nginx -g \"daemon off;\"\n\
priority=20\n\
autostart=true\n\
autorestart=true\n\
stdout_logfile=/dev/stdout\n\
stderr_logfile=/dev/stderr\n\
EOF'

# ---------- start.sh (entrypoint sin migraciones) ----------
RUN bash -lc 'cat > /start.sh << "EOF"\n\
#!/usr/bin/env bash\n\
set -e\n\
export PORT=${PORT:-8080}\n\
# Renderizar nginx con PORT\n\
envsubst \"\\${PORT}\" < /etc/nginx/conf.d/default.conf.template > /etc/nginx/conf.d/default.conf\n\
cd /var/www/html\n\
php artisan storage:link || true\n\
php artisan config:cache || true\n\
php artisan route:cache || true\n\
php artisan view:cache || true\n\
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf\n\
EOF\n\
&& chmod +x /start.sh'

ENV PORT=8080
EXPOSE 8080
CMD ["/start.sh"]
